/* gulp.spritesmith v6.2.1 */
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.
  It should be used with a "retina group" variable.

The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/

$icon-home-group: ('icon-home', $icon-home, $icon-home-2x, );

.icon-home {
  @include retina-sprite($icon-home-group);
}
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
/*
The `retina-sprites` mixin generates a CSS rule and media query for retina groups
  This yields the same output as CSS retina template but can be overridden in SCSS

@include retina-sprites($retina-groups);
*/
/* normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Change the default font family in all browsers (opinionated).
 * 2. Prevent adjustments of font size after orientation changes in IE and iOS.
 */
@import url("https://fonts.googleapis.com/css?family=Open+Sans:400,600");
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 * 2. Add the correct display in IE.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary {
  /* 1 */
  display: block; }

/**
 * Add the correct display in IE 9-.
 */
audio,
canvas,
progress,
video {
  display: inline-block; }

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline; }

/**
 * Add the correct display in IE 10-.
 * 1. Add the correct display in IE.
 */
template,
[hidden] {
  display: none; }

/* Links
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */ }

/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers (opinionated).
 */
a:active,
a:hover {
  outline-width: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the bottom border in Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */ }

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit; }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font: 500 28px/1.2 'marmelad', sans-serif;
  margin: 5px 0 20px 0; }
  @media (min-width: 760px) {
    h1 {
      font: 500 36px/1.4 'marmelad', sans-serif;
      margin: 53px 0 30px 0; } }
  @media (min-width: 1160px) {
    h1 {
      margin-top: 35px; } }

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000; }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px; }

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/* Forms
   ========================================================================== */
/**
 * 1. Change font properties to `inherit` in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
select,
textarea {
  font: inherit;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Restore the font weight unset by the previous rule.
 */
optgroup {
  font-weight: bold; }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Change the border, margin, and padding in all browsers (opinionated).
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on OS X.
 */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Correct the text style of placeholders in Chrome, Edge, and Safari.
 */
::-webkit-input-placeholder {
  color: inherit;
  opacity: 0.54; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

html {
  position: relative;
  min-height: 100%;
  box-sizing: border-box;
  font-size: 16px;
  -webkit-tap-highlight-color: transparent; }

body {
  background: #d6d6d6;
  font-family: "Open Sans", Helvetica, Arial, sans-serif;
  font-size: 16px;
  line-height: 1.65;
  color: #000000; }

*,
*::before,
*::after {
  box-sizing: inherit; }

@media (min-width: 760px) {
  .visible-xs {
    display: none !important; } }

.visible-sm {
  display: none !important; }
  @media (min-width: 760px) {
    .visible-sm {
      display: block !important; } }

.visible-xl {
  display: none !important; }
  @media (min-width: 1160px) {
    .visible-xl {
      display: block !important; } }

.article {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  padding-top: 25px; }
  @media (min-width: 760px) {
    .article {
      -webkit-flex-direction: row;
      -ms-flex-direction: row;
      flex-direction: row;
      -webkit-align-items: center;
      -ms-flex-align: center;
      align-items: center;
      -webkit-justify-content: space-between;
      -ms-flex-pack: justify;
      justify-content: space-between; } }
  @media (min-width: 1160px) {
    .article {
      padding-top: 60px;
      margin-bottom: 25px; } }

.article--reverse {
  -webkit-flex-direction: column-reverse;
  -ms-flex-direction: column-reverse;
  flex-direction: column-reverse; }
  @media (min-width: 760px) {
    .article--reverse {
      -webkit-flex-direction: row-reverse;
      -ms-flex-direction: row-reverse;
      flex-direction: row-reverse; } }

.article-content {
  padding: 0 15px; }
  @media (min-width: 760px) {
    .article-content {
      padding: 0; } }

.article-content__title {
  margin: 5px 0 25px 0;
  font: 600 30px/30px 'Open Sans', sans-serif;
  text-transform: uppercase;
  letter-spacing: 1px; }
  @media (min-width: 760px) {
    .article-content__title {
      font: 600 37px/37px 'Open Sans', sans-serif; } }
  @media (min-width: 1160px) {
    .article-content__title {
      font: 600 47px/47px 'Open Sans', sans-serif; } }

.article-content__title-sup {
  color: #adadad;
  text-transform: uppercase;
  letter-spacing: 1px; }

.article-content__text {
  padding-bottom: 30px; }

.article-photo {
  padding-bottom: 25px; }

.article-photo--pdg {
  padding: 20px 0; }
  @media (min-width: 760px) {
    .article-photo--pdg {
      padding-top: 30px; } }
  @media (min-width: 1160px) {
    .article-photo--pdg {
      padding: 75px 0; } }

.article-content__link-btn {
  display: inline-block;
  margin-bottom: 28px;
  padding: 0 20px;
  border: 1px solid #2f302f;
  line-height: 50px;
  color: #2f302f;
  text-transform: uppercase;
  text-decoration: none;
  letter-spacing: 1px;
  transition: all ease-out .2s; }
  .article-content__link-btn:hover {
    background-color: #2f302f;
    color: #fff; }

@media (min-width: 760px) {
  .article--column {
    -webkit-flex-direction: column;
    -ms-flex-direction: column;
    flex-direction: column; }
    .article--column .article-content,
    .article--column .article-photo {
      width: 100%; }
  .article-content,
  .article-photo {
    width: 47.5%; } }

.article-photo img {
  display: block;
  width: 100%; }

.article-gallery {
  margin: 0;
  padding: 40px 0 0 0;
  list-style: none; }
  .article-gallery > li {
    margin-bottom: 30px; }
  @media (min-width: 760px) {
    .article-gallery {
      display: -webkit-flex;
      display: -ms-flexbox;
      display: flex;
      -webkit-justify-content: space-between;
      -ms-flex-pack: justify;
      justify-content: space-between;
      -webkit-flex-wrap: wrap;
      -ms-flex-wrap: wrap;
      flex-wrap: wrap;
      -webkit-align-items: flex-end;
      -ms-flex-align: end;
      align-items: flex-end; }
      .article-gallery > li {
        position: relative;
        margin-top: 165px; } }
    @media (min-width: 760px) and (min-width: 1160px) {
      .article-gallery > li {
        margin-top: 205px; } }
  @media (min-width: 1160px) {
    .article-gallery {
      padding-bottom: 50px; } }
  .article-gallery img {
    display: block;
    width: 100%; }

.gallery__item-name {
  padding: 15px 15px 28px 15px;
  font-size: 14px;
  color: #adadad; }

@media (min-width: 760px) {
  .gallery__item--lg {
    width: 64%; }
  .gallery__item--md {
    width: 47%; }
  .gallery__item--sm {
    width: 30%; } }

@media (min-width: 760px) {
  .gallery__item--offset {
    top: -165px; }
    .gallery__item--offset-sm {
      top: -20px; } }

@media (min-width: 1160px) {
  .gallery__item--offset {
    top: -205px; }
    .gallery__item--offset-sm {
      top: 50px; }
    .gallery__item--offset-xl {
      top: -125px; } }

.container {
  max-width: 1160px;
  margin: 0 auto;
  background-color: #fff; }
  @media (min-width: 760px) {
    .container {
      padding: 0 30px; } }
  @media (min-width: 1160px) {
    .container {
      padding: 0 60px; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
